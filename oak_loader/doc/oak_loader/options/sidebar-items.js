initSidebarItems({"enum":[["SignatureLocation",""]],"fn":[["create_app_config","Parse application configuration into an instance of [`ApplicationConfiguration`]"],["create_grpc_config","Create the overall [`oak_runtime::GrpcConfiguration`] from the TLS certificate and private key files."],["create_http_config","Create the overall [`oak_runtime::HttpConfiguration`] from the TLS certificate and private key files."],["create_runtime_config","Parse input options and create a `RuntimeConfiguration`."],["create_secure_server_config","Create [`oak_runtime::SecureServerConfiguration`] containing optional TLS configurations for HTTP and gRPC server nodes."],["create_sign_table","Create a signature table for Oak runtime. Returns an [`SignatureTable`] that maps each module hash to a vector of [`SignatureBundle`]. Returned signatures are not verified yet, they are supposed to be verified by the `oak_runtime`."],["get_default_root_tls_certs","Gets the default root TLS certificates from the embedded byte array."],["get_oidc_client_info","Parse OpenID Connect client configuration file into a [`ClientInfo`] ."],["get_root_tls_certificate_or_default","If `oak_debug` is enabled, read root TLS certificate from the specified file. Otherwise, return the default root TLS certificate from the embedded byte array."],["parse_config_map","Parse a collection of configuration entries and return the contents of the corresponding files as a [`ConfigMap`]."]],"struct":[["ConfigEntry","A specification of a configuration entry as human readable key and a path to a file whose contents constitutes the actual value."],["Opt","Command line options for the Oak loader."],["SignatureManifest",""]]});