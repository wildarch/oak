initSidebarItems({"constant":[["INVALID_HANDLE","Invalid handle value."],["OAK_CHALLENGE",""],["OAK_LABEL_GRPC_METADATA_KEY","The key used for encoded Labels in gRPC metadata."],["OAK_LABEL_HTTP_JSON_KEY","The header key used for JSON formatted Labels in HTTP requests."],["OAK_LABEL_HTTP_PROTOBUF_KEY","The header key used for protobuf encoded Labels in HTTP requests."],["OAK_SIGNED_CHALLENGE_JSON_KEY","The header key used for JSON formatted signed authentication challenge."],["OAK_SIGNED_CHALLENGE_PROTOBUF_KEY","The header key used for protobuf formatted signed authentication challenge."],["SPACE_BYTES_PER_HANDLE","Number of bytes needed per-handle for channel readiness notifications."]],"fn":[["channel_close","Closes the channel identified by `handle`."],["channel_create","Create a new unidirectional Channel."],["channel_label_read","Returns the label for the channel identified by `handle`."],["channel_read","Read a message from a channel."],["channel_write","Write a message to a channel."],["node_create","Creates a new Node instance running code identified by a serialized `NodeConfiguration`."],["node_label_read","Returns the label of the current calling node."],["node_privilege_read","Returns a label indicating the downgrade privilege of the current calling node."],["random_get","Fill a buffer with random data."],["wait_on_channels","Wait for channels to be ready for reading."]],"mod":[["label","Labels represent the kinds of information that is allowed to be processed by entities in the Oak system. The Oak Runtime allows Oak Nodes to manipulate labels, and so the labels need to be passed across the Oak ABI in a defined binary format.  That format is a serialized protocol buffer holding the `Label` message defined in the label.proto file."],["proto",""]],"type":[["Handle","Handle used to identify read or write channel halves."],["NodeMain","Expected Rust type for a Node entrypoint."],["NodeMainC","Expected type for a Node entrypoint that is exposed as a Wasm export."]]});