(function() {var implementors = {};
implementors["oak_services"] = [{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Code","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyTemplate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeysetGenerateRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeysetResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeysetPublicRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeysetUnbindRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeysetBindRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeysetBindResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KmsProxyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AeadEncryptRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AeadEncryptResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AeadDecryptRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AeadDecryptResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeterministicAeadEncryptRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeterministicAeadEncryptResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeterministicAeadDecryptRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeterministicAeadDecryptResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifyMacRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifyMacResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ComputeMacRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ComputeMacResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ComputePrfRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ComputePrfResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureSignRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureSignResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureVerifyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureVerifyResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputPrefixType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeysetFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TemplateId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrpcRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrpcResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogMessage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogInit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetRoughtimeRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Roughtime","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()