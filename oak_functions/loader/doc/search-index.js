var searchIndex = JSON.parse('{\
"oak_functions_loader":{"doc":"","i":[[0,"logger","oak_functions_loader","",null,null],[3,"Logger","oak_functions_loader::logger","A simple logger that splits logging between writing logs…",null,null],[11,"new","","Creates a new logger with the specified maximum…",0,[[["levelfilter",4]]]],[11,"for_test","","Creates a new logger for testing using the debug…",0,[[]]],[11,"log_sensitive","","Logs the message at the specified `Level`, but only if the…",0,[[["level",4]]]],[11,"log_public","","Logs a message that contains only public, non-sensitive…",0,[[["level",4]]]],[0,"lookup","oak_functions_loader","",null,null],[3,"LookupData","oak_functions_loader::lookup","An in-memory lookup store instance that can refresh its…",null,null],[5,"parse_lookup_entries","","",null,[[["buf",8]],[["result",6],["hashmap",3]]]],[11,"new_empty","","Creates a new empty [`LookupData`] instance that can…",1,[[["logger",3]],["lookupdata",3]]],[11,"refresh","","Refreshes the internal entries of this struct from the…",1,[[]]],[11,"get","","Convenience getter for an individual entry that reduces…",1,[[],[["vec",3],["option",4]]]],[11,"len","","",1,[[]]],[11,"is_empty","","",1,[[]]],[0,"server","oak_functions_loader","",null,null],[3,"Policy","oak_functions_loader::server","A policy describing limits on the size of the response and…",null,null],[12,"constant_response_size_bytes","","A fixed size for responses returned by the trusted runtime.",2,null],[12,"constant_processing_time","","A fixed response time.",2,null],[3,"FunctionsResponse","","The response from invoking the Wasm module functionality.",null,null],[12,"status_code","","",3,null],[12,"body","","",3,null],[3,"WasmHandler","","",null,null],[5,"create_and_start_server","","Starts an HTTP server on the given address, serving the…",null,[[["logger",3],["future",8],["arc",3],["socketaddr",4],["policy",3],["option",4],["lookupdata",3]]]],[11,"validate","","",2,[[],["result",6]]],[11,"create","","",4,[[["arc",3],["logger",3],["lookupdata",3]],["result",6]]],[11,"handle_request","","",4,[[["body",3],["request",3]]]],[11,"from","oak_functions_loader::logger","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"into_any_arc","","",0,[[["arc",3]],[["arc",3],["any",8]]]],[11,"into_any","","",0,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",0,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",0,[[],["any",8]]],[11,"as_any_mut","","",0,[[],["any",8]]],[11,"from","oak_functions_loader::lookup","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"into_any_arc","","",1,[[["arc",3]],[["arc",3],["any",8]]]],[11,"into_any","","",1,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",1,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",1,[[],["any",8]]],[11,"as_any_mut","","",1,[[],["any",8]]],[11,"from","oak_functions_loader::server","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"into_any_arc","","",2,[[["arc",3]],[["arc",3],["any",8]]]],[11,"into_any","","",2,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",2,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",2,[[],["any",8]]],[11,"as_any_mut","","",2,[[],["any",8]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"into_any_arc","","",3,[[["arc",3]],[["arc",3],["any",8]]]],[11,"into_any","","",3,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",3,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",3,[[],["any",8]]],[11,"as_any_mut","","",3,[[],["any",8]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"into_any_arc","","",4,[[["arc",3]],[["arc",3],["any",8]]]],[11,"into_any","","",4,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",4,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",4,[[],["any",8]]],[11,"as_any_mut","","",4,[[],["any",8]]],[11,"clone","oak_functions_loader::logger","",0,[[],["logger",3]]],[11,"clone","oak_functions_loader::server","",2,[[],["policy",3]]],[11,"clone","","",4,[[],["wasmhandler",3]]],[11,"default","oak_functions_loader::logger","",0,[[]]],[11,"fmt","oak_functions_loader::server","",2,[[["formatter",3]],["result",6]]],[11,"deserialize","","",2,[[],["result",4]]]],"p":[[3,"Logger"],[3,"LookupData"],[3,"Policy"],[3,"FunctionsResponse"],[3,"WasmHandler"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);