initSidebarItems({"enum":[["ChannelReadStatus","Single byte values used to indicate the read status of a channel on the `oak.wait_on_channels` host function."],["OakError","Generic Oak error."],["OakStatus","Status values exchanged as i32 values across the Node Wasm interface."]],"fn":[["channel_close","Close the specified channel [`Handle`]."],["channel_create","Create a new unidirectional channel."],["channel_create_with_downgrade","The same as `channel_create`, but also applies the current Node's downgrade privilege when checking IFC restrictions."],["channel_label_read","Get the [`Label`] for the channel associated with the `handle`."],["channel_read","Read a message from a channel without blocking."],["channel_read_with_downgrade","The same as `channel_read`, but also applies the current Node's downgrade privilege when checking IFC restrictions."],["channel_write","Write a message to a channel."],["channel_write_with_downgrade","The same as `channel_write`, but also applies the current Node's downgrade privilege when checking IFC restrictions."],["node_create","Creates a new Node running the configuration identified by `config_name`, running the entrypoint identified by `entrypoint_name` (for a Web Assembly Node; this parameter is ignored when creating a pseudo-Node), with the provided `label`, and passing it the given handle."],["node_create_with_downgrade","The same as `node_create`, but also applies the current Node's downgrade privilege when checking IFC restrictions."],["node_label_read","Get the [`Label`] for the current node."],["node_privilege_read","Get the downgrade privilege for the current node represented as a [`Label`]."],["random_get","Fill a buffer with random data."],["result_from_status","Convert a status returned from a host function call to a `Result`."],["run_command_loop","Runs a command loop on the provided [`CommandHandler`]:"],["set_panic_hook","Install a panic hook that logs panic information."],["wait_on_channels","Wait for one or more of the provided handles to become ready for reading from.  On success, the returned vector of [`ChannelReadStatus`] values will be in 1-1 correspondence with the passed-in vector of [`Handle`]s."],["wait_on_channels_with_downgrade","The same as `wait_on_channels`, but also applies the current Node's downgrade privilege when checking IFC restrictions."]],"macro":[["entrypoint","Register a new Node entrypoint."],["entrypoint_command_handler","Similar to [`entrypoint`], but offers a less verbose API in case in which the handler is a [`CommandHandler`] instance. In this case, the type of incoming messages is inferred from the generic type associated with the handler instance, and only the entrypoint name needs to be specified."],["entrypoint_command_handler_init","Similar to [`entrypoint_command_handler`], but for nodes that expect to receive initialization data via an [`oak_io::InitWrapper`] instance over the inbound channel before processing subsequent commands."],["impl_dispatcher","Implements the [`ServerNode`] trait for the specified type using the provided dispatcher, which is generated by the `oak_util` crate from the protobuf service definition."]],"mod":[["crypto","Helper library for accessing the Oak cryptography service."],["grpc","Functionality to help Oak Nodes interact with gRPC."],["handle","Utilities for visiting, extract and injecting handles."],["http","Functionality to help Oak Nodes create HTTP server and HTTP client pseudo-Nodes."],["io","Wrappers for Oak SDK types to allow their use with [`std::io`]."],["logger","A logger that sends output to an Oak logging channel, for use with the log facade."],["node_config","Helper methods for creating common [`NodeConfiguration`] instances."],["proto","Auto-generated code derived from protocol buffer definitions."],["rand","Functionality to allow use of the rand crate in Oak."],["roughtime","Helper library for accessing the Oak Roughtime service."],["storage","Helper library for accessing Oak storage services."]],"struct":[["Label","Label represents information flowing through a Node or channel."],["ReadHandle","Wrapper for a handle to the read half of a channel."],["WriteHandle","Wrapper for a handle to the send half of a channel."]],"trait":[["CommandHandler","Trait implemented by Oak Nodes (or parts thereof) that operate on commands."],["WasmEntrypoint","Trait implemented by structs that correspond to entrypoint of Wasm nodes."],["WithInit","Trait implemented by structs that require an initialization step by receiving data over the inbound channel (usually wrapped within a [`oak_io::InitWrapper`] message)."]],"type":[["Handle","Handle used to identify read or write channel halves."]]});