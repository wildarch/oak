(function() {var implementors = {};
implementors["oak"] = [{"text":"impl RefUnwindSafe for ChannelResponseWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteMode","synthetic":true,"types":[]},{"text":"impl&lt;T, R, Q&gt; RefUnwindSafe for ServerMethod&lt;T, R, Q&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OakRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Roughtime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Storage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrpcInvocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrpcInvocationSender","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrpcInvocationReceiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpInvocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpInvocationSender","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChannelReadRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChannelReadResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChannelWriteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChannelWriteResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChannelDeleteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChannelDeleteResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChannelBeginRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChannelBeginResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChannelCommitRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChannelCommitResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChannelRollbackRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChannelRollbackResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageServiceDispatcher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageServiceClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetRoughtimeRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Roughtime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoughtimeServiceDispatcher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoughtimeServiceClient","synthetic":true,"types":[]}];
implementors["oak_app_build"] = [{"text":"impl RefUnwindSafe for Opt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Manifest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for External","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitialNodeConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Module","synthetic":true,"types":[]}];
implementors["oak_tests"] = [{"text":"impl RefUnwindSafe for Profile","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()