initSidebarItems({"constant":[["ALL_CLIENTS",""],["DEFAULT_EXAMPLE_BACKEND_RUST_TARGET",""],["DEFAULT_SERVER_RUST_TARGET",""],["NO_CLIENTS",""]],"enum":[["FormatMode",""],["Target",""]],"fn":[["build",""],["build_application",""],["build_docker",""],["build_server",""],["build_wasm_module",""],["check_format",""],["cleanup",""],["crate_manifest_files","Return an iterator of all known Cargo Manifest files that define crates."],["example_toml_files",""],["file_contains",""],["format",""],["is_bazel_file","Return whether the provided path refers to a Bazel file (`BUILD`, `WORKSPACE`, or `*.bzl`)"],["is_build_file",""],["is_cargo_toml_file","Return whether the provided path refers to a `Cargo.toml` file. Note that it does not differentiate between workspace-level and crate-level files."],["is_cargo_workspace_file","Return whether the provided path refers to a workspace-level `Cargo.toml` file, by looking at the contents of the file."],["is_clang_format_file","Return whether the provided path refers to a source file that can be formatted by clang-tidy."],["is_dockerfile",""],["is_example_toml_file",""],["is_html_file",""],["is_ignored_entry",""],["is_ignored_path","Return whether to ignore the specified path. This is used by the `walker` package to efficiently avoid descending into blacklisted directories."],["is_javascript_file",""],["is_markdown_file","Return whether the provided path refers to a markdown file (`*.md`)"],["is_shell_script",""],["is_source_code_file","Return whether the provided path refers to a source file in a programming language."],["is_toml_file",""],["is_typescript_file",""],["is_yaml_file",""],["main",""],["read_file",""],["run",""],["run_bazel_build",""],["run_bazel_test",""],["run_bazel_tests",""],["run_buildifier",""],["run_cargo_clippy",""],["run_cargo_deny",""],["run_cargo_doc",""],["run_cargo_fmt",""],["run_cargo_test",""],["run_cargo_test_tsan",""],["run_cargo_tests",""],["run_cargo_udeps",""],["run_check_build_licenses",""],["run_check_license",""],["run_check_todo",""],["run_ci",""],["run_clang_format",""],["run_clang_tidy",""],["run_client",""],["run_embedmd",""],["run_example",""],["run_example_server",""],["run_examples",""],["run_hadolint",""],["run_liche",""],["run_markdownlint",""],["run_prettier",""],["run_shellcheck",""],["run_tests",""],["run_tests_tsan",""],["source_files","Return an iterator of all the first-party and non-ignored files in the repository, which can be then additionally filtered by the caller."],["to_string",""]],"macro":[["spread","Similar to the `vec!` macro, but also allows a \"spread\" operator syntax (`...`) to inline and expand nested iterable values."]],"mod":[["check_build_licenses",""],["check_license",""],["check_todo",""],["internal",""]],"static":[["PROCESSES",""]],"struct":[["Application",""],["Example",""],["ExampleServer",""],["Executable",""]]});