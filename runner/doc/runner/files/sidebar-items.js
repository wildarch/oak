initSidebarItems({"fn":[["crate_manifest_files","Return an iterator of all known Cargo Manifest files that define crates."],["example_toml_files",""],["file_contains",""],["is_bazel_file","Return whether the provided path refers to a Bazel file (`BUILD`, `WORKSPACE`, or `*.bzl`)"],["is_build_file",""],["is_cargo_package_file","Return whether the provided path refers to a `Cargo.toml` file that defines a crate, by looking at the contents of the file."],["is_cargo_toml_file","Return whether the provided path refers to a `Cargo.toml` file. Note that it does not differentiate between workspace-level and crate-level files."],["is_cargo_workspace_file","Return whether the provided path refers to a workspace-level `Cargo.toml` file, by looking at the contents of the file."],["is_clang_format_file","Return whether the provided path refers to a source file that can be formatted by clang-tidy."],["is_dockerfile",""],["is_example_toml_file",""],["is_html_file",""],["is_ignored_entry",""],["is_ignored_path","Return whether to ignore the specified path. This is used by the `walker` package to efficiently avoid descending into blacklisted directories."],["is_javascript_file",""],["is_markdown_file","Return whether the provided path refers to a markdown file (`*.md`)"],["is_shell_script",""],["is_source_code_file","Return whether the provided path refers to a source file in a programming language."],["is_toml_file",""],["is_typescript_file",""],["is_yaml_file",""],["read_file",""],["source_files","Return an iterator of all the first-party and non-ignored files in the repository, which can be then additionally filtered by the caller."],["to_string",""],["workspace_manifest_files","Return an iterator of all known Cargo Manifest files that define workspaces."]]});