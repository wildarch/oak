//
// Copyright 2020 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

import "oak/proto/handle.proto";

package oak.examples.injection;

message BlobStoreInterface {
  oak.handle.Sender sender = 1 [(oak.handle.message_type) = ".oak.examples.injection.BlobRequest"];
  oak.handle.Receiver receiver = 2
      [(oak.handle.message_type) = ".oak.examples.injection.BlobResponse"];
}

message GetBlobRequest {
  fixed64 id = 1;
}

message PutBlobRequest {
  // Put 0 for new blob to store.
  fixed64 id = 1;
  string blob = 2;
}

message BlobRequest {
  oneof request {
    GetBlobRequest get = 1;
    PutBlobRequest put = 2;
  }
}

message BlobResponse {
  fixed64 id = 1;
  string blob = 2;
}

message BlobStoreRequest {}

message BlobStoreResponse {
  BlobStoreInterface interface = 1;
}

service BlobStore {
  rpc GetBlob(GetBlobRequest) returns (BlobResponse);
  rpc PutBlob(PutBlobRequest) returns (BlobResponse);
}

message BlobStoreProviderSender {
  oak.handle.Sender sender = 1
      [(oak.handle.message_type) = ".oak.examples.injection.BlobStoreInterface"];
}

message BlobStoreSender {
  oak.handle.Sender sender = 1 [(oak.handle.message_type) = ".oak.examples.injection.BlobResponse"];
}
