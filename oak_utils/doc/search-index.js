var searchIndex = JSON.parse('{\
"oak_utils":{"doc":"","i":[[3,"ProtoOptions","oak_utils","Options for generating Protocol buffer Rust types.",null,null],[12,"generate_services","","Generate Oak-specific service code for inter-node…",0,null],[12,"derive_handle_visit","","Automatically derive the `HandleVisit` trait from the Oak…",0,null],[12,"out_dir_override","","",0,null],[3,"CodegenOptions","","Options for building gRPC code.",null,null],[12,"build_client","","Specify whether to build client related code.",1,null],[12,"build_server","","Specify whether to build server related code.",1,null],[5,"compile_protos","","Build Rust code corresponding to a set of protocol buffer…",null,[[]]],[5,"compile_protos_with_options","","Like `compile_protos`, but allows for configuring options…",null,[[["protooptions",3]]]],[5,"generate_grpc_code","","Generate gRPC code from Protobuf using `tonic` library.",null,[[["codegenoptions",3]],["result",6]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"default","","",0,[[],["protooptions",3]]],[11,"default","","",1,[[],["codegenoptions",3]]]],"p":[[3,"ProtoOptions"],[3,"CodegenOptions"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);